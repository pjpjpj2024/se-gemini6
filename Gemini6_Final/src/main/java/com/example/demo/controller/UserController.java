package com.example.demo.controller;

import com.example.demo.UserRepository;
import com.example.demo.model.User;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;


@Controller
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @GetMapping("/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser (@RequestParam String username,
                       @RequestParam String password,
                       @RequestParam String name,
                       @RequestParam String accessLevel) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setUsername(username);
        n.setPassword(password);
        n.setName(name);
        n.setAccessLevel(accessLevel);
        userRepository.save(n);
        return "Saved";
    }

    @PostConstruct
    public void init() {
        if (userRepository.count() == 0) {
            User admin = new User();
            admin.setUsername("asty");
            admin.setPassword("asty123");
            admin.setName("Asty");
            admin.setAccessLevel("Astronomer");
            userRepository.save(admin);

            User admin2 = new User();
            admin2.setUsername("johnny walker");
            admin2.setPassword("john");
            admin2.setName("johnny walker");
            admin2.setAccessLevel("Astronomer");
            userRepository.save(admin2);
        }
    }

    @GetMapping("/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping("/allusers")
    public String getAllUsers(Model model) {
        Iterable<User> users = userRepository.findAll();
        model.addAttribute("users", users);
        return "users"; // render users.html
    }

}
